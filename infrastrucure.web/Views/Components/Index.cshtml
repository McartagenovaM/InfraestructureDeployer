@using infrastrucure.web.Models
@model ComponentsIndexViewModel
@{
    ViewData["Title"] = "Components";
}

<div class="d-flex justify-content-between align-items-center mb-4 flex-wrap gap-2">
    <h1 class="h3 mb-0">Components</h1>
    <a class="btn btn-primary" asp-action="Create">
        <i class="bi bi-plus-lg me-2" aria-hidden="true"></i>New Component
    </a>
</div>

<form method="get" class="row g-3 filters-row align-items-end mb-4">
    <div class="col-12 col-sm-6 col-lg-3">
        <label class="form-label" for="environmentFilter">Environment</label>
        <select class="form-select" id="environmentFilter" name="environment">
            <option value="">All</option>
            @foreach (var option in Model.EnvironmentOptions)
            {
                <option value="@option" selected="@(string.Equals(Model.Environment, option, StringComparison.OrdinalIgnoreCase) ? "selected" : null)">@option.ToUpperInvariant()</option>
            }
        </select>
    </div>
    <div class="col-12 col-sm-6 col-lg-3">
        <label class="form-label" for="typeFilter">Type</label>
        <select class="form-select" id="typeFilter" name="type">
            <option value="">All</option>
            @foreach (var option in Model.TypeOptions)
            {
                <option value="@option" selected="@(string.Equals(Model.Type, option, StringComparison.OrdinalIgnoreCase) ? "selected" : null)">@option.ToUpperInvariant()</option>
            }
        </select>
    </div>
    <div class="col-12 col-sm-6 col-lg-3">
        <label class="form-label" for="statusFilter">Status</label>
        <select class="form-select" id="statusFilter" name="status">
            <option value="">All</option>
            @foreach (var option in Model.StatusOptions)
            {
                <option value="@option" selected="@(string.Equals(Model.Status, option, StringComparison.OrdinalIgnoreCase) ? "selected" : null)">@option.ToUpperInvariant()</option>
            }
        </select>
    </div>
    <div class="col-12 col-sm-6 col-lg-3 d-flex gap-2">
        <button type="submit" class="btn btn-outline-primary flex-grow-1 flex-sm-grow-0">
            <i class="bi bi-funnel me-2" aria-hidden="true"></i>Apply Filters
        </button>
        <a class="btn btn-outline-secondary" asp-action="Index" asp-route-pageSize="@Model.PageSize">
            <i class="bi bi-arrow-counterclockwise me-2" aria-hidden="true"></i>Reset
        </a>
    </div>
</form>

@if (!Model.HasResults)
{
    <div class="card border-0 shadow-sm">
        <div class="card-body py-5 text-center">
            <div class="mb-3">
                <i class="bi bi-hdd-network fs-1 text-primary" aria-hidden="true"></i>
            </div>
            <h2 class="h4 mb-2">No components found</h2>
            <p class="text-secondary mb-4">Try adjusting filters or create a new component.</p>
            <a class="btn btn-primary" asp-action="Create">
                <i class="bi bi-plus-lg me-2" aria-hidden="true"></i>New Component
            </a>
        </div>
    </div>
}
else
{
    <div class="card shadow-sm">
        <div class="card-body p-0">
            <div class="table-responsive-sm">
                <table class="table table-striped table-hover mb-0 align-middle">
                    <thead class="table-light">
                        <tr>
                            <th scope="col">Name</th>
                            <th scope="col">Type</th>
                            <th scope="col">Environment</th>
                            <th scope="col">Status</th>
                            <th scope="col">Created (UTC)</th>
                            <th scope="col" class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var component in Model.Components)
                        {
                            <tr>
                                <td>@component.Name</td>
                                <td class="text-uppercase">@component.Type</td>
                                <td>
                                    @await Html.PartialAsync("_EnvBadge", component.Environment)
                                </td>
                                <td>
                                    @await Html.PartialAsync("_StatusBadge", component.Status)
                                </td>
                                <td>@component.CreatedUtc.ToString("yyyy-MM-dd HH:mm")</td>
                                <td class="text-end">
                                    @await Html.PartialAsync("_ActionButtons", new ComponentActionsVM
                                    {
                                        Id = component.Id,
                                        Name = component.Name,
                                        Status = component.Status,
                                        CanProvision = !string.Equals(component.Status, "DELETED", System.StringComparison.OrdinalIgnoreCase)
                                                       && !string.Equals(component.Status, "DEPLOYING", System.StringComparison.OrdinalIgnoreCase),
                                        CanDeploy = string.Equals(component.Status, "PROVISIONED", System.StringComparison.OrdinalIgnoreCase),
                                        CanTeardown = string.Equals(component.Status, "PROVISIONED", System.StringComparison.OrdinalIgnoreCase),
                                        CanDelete = true
                                    })
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        @if (Model.TotalPages > 1)
        {
            <div class="card-footer bg-white py-3">
                <nav aria-label="Components pagination">
                    <ul class="pagination justify-content-end mb-0">
                        <li class="page-item @(Model.PageNumber <= 1 ? "disabled" : string.Empty)">
                            <a class="page-link" asp-action="Index"
                               asp-route-page="@(Model.PageNumber - 1)"
                               asp-route-pageSize="@Model.PageSize"
                               asp-route-environment="@Model.Environment"
                               asp-route-type="@Model.Type"
                               asp-route-status="@Model.Status"
                               aria-label="Previous page">Previous</a>
                        </li>
                        @for (var pageNumber = 1; pageNumber <= Model.TotalPages; pageNumber++)
                        {
                            <li class="page-item @(Model.PageNumber == pageNumber ? "active" : string.Empty)">
                                <a class="page-link" asp-action="Index"
                                   asp-route-page="@pageNumber"
                                   asp-route-pageSize="@Model.PageSize"
                                   asp-route-environment="@Model.Environment"
                                   asp-route-type="@Model.Type"
                                   asp-route-status="@Model.Status">@pageNumber</a>
                            </li>
                        }
                        <li class="page-item @(Model.PageNumber >= Model.TotalPages ? "disabled" : string.Empty)">
                            <a class="page-link" asp-action="Index"
                               asp-route-page="@(Model.PageNumber + 1)"
                               asp-route-pageSize="@Model.PageSize"
                               asp-route-environment="@Model.Environment"
                               asp-route-type="@Model.Type"
                               asp-route-status="@Model.Status"
                               aria-label="Next page">Next</a>
                        </li>
                    </ul>
                </nav>
            </div>
        }
    </div>
}

@await Html.PartialAsync("_ConfirmDeleteModal")
